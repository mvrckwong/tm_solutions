version: '3.8'
name: 'airflow-sqlite-tmds'

x-airflow-common:
  &airflow-common
  build:
    context: ./docker
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite://${AIRFLOW_SQLITE_DB_DEST}
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: sqlite://${AIRFLOW_SQLITE_DB_DEST}

    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
  user: root
  volumes:
    - ${AIRFLOW_SQLITE_DB_SRC}:${AIRFLOW_SQLITE_DB_DEST}
    
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins

services:
  airflow-init:
    <<: *airflow-common
    command: 
      - "/bin/bash airflow db init"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: ${_AIRFLOW_DB_MIGRATE}
      _AIRFLOW_WWW_USER_CREATE: ${_AIRFLOW_WWW_USER_CREATE}
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    #restart: always

  # airflow-cli:
  #   <<: *airflow-common
  #   profiles:
  #     - debug
  #   environment:
  #     <<: *airflow-common-env
  #     CONNECTION_CHECK_MAX_COUNT: "0"
  #   # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
  #   command:
  #     - bash
  #     - -c
  #     - airflow

  # airflow-webserver-users:
  #   &airflow-common
  #   command: ['webserver']
  #   ports:
  #     - ${PORT_AIRFLOW:-8080}:8080
  #   healthcheck:
  #     test: ['CMD', 'curl', '--fail', 'http://localhost:8080/health']
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s
  #   restart: always

  # # deploying the airflow triggerer
  # airflow-triggerer-users:
  #   &airflow-common
  #   command: ['triggerer']
  #   healthcheck:
  #     test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     airflow-webserver-users:
  #       condition:
  #         service_healthy

  # # deplying the airflow scheduler
  # airflow-scheduler-users:
  #   &airflow-common
  #   command: ['scheduler']
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     airflow-webserver-users:
  #       condition:
  #         service_healthy